This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-06T19:40:26.135Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
backend/.env
backend/config/paychangu.js
backend/createAdmin.js
backend/middleware/auth.js
backend/middleware/upload.js
backend/models/Business.js
backend/models/Contract.js
backend/models/notification.js
backend/models/Rent.js
backend/models/Ticket.js
backend/models/User.js
backend/models/UserReport.js
backend/package.json
backend/routes/auth.js
backend/routes/business.js
backend/routes/notifications.js
backend/routes/payments backup.js
backend/routes/payments.js
backend/routes/revenue.js
backend/routes/tickets.js
backend/routes/userReport.js
backend/server.js
backend/services/CtechPaymentService.js
backend/services/EmailService.js
backend/utils/notifications.js
frontend/.git/COMMIT_EDITMSG
frontend/.git/config
frontend/.git/description
frontend/.git/HEAD
frontend/.git/hooks/applypatch-msg.sample
frontend/.git/hooks/commit-msg.sample
frontend/.git/hooks/fsmonitor-watchman.sample
frontend/.git/hooks/post-update.sample
frontend/.git/hooks/pre-applypatch.sample
frontend/.git/hooks/pre-commit.sample
frontend/.git/hooks/pre-merge-commit.sample
frontend/.git/hooks/pre-push.sample
frontend/.git/hooks/pre-rebase.sample
frontend/.git/hooks/pre-receive.sample
frontend/.git/hooks/prepare-commit-msg.sample
frontend/.git/hooks/push-to-checkout.sample
frontend/.git/hooks/sendemail-validate.sample
frontend/.git/hooks/update.sample
frontend/.git/info/exclude
frontend/.git/logs/HEAD
frontend/.git/logs/refs/heads/master
frontend/.git/refs/heads/master
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/public/serviceWorker.js
frontend/README.md
frontend/src/App.css
frontend/src/App.js
frontend/src/App.test.js
frontend/src/components/business/BusinessApplications.js
frontend/src/components/business/BusinessRegistration.js
frontend/src/components/business/PaymentStatus backup.js
frontend/src/components/business/PaymentStatus.js
frontend/src/components/BusinessCertificate_obsoleet.js
frontend/src/components/BusinessCertificate_obsolete.js
frontend/src/components/BusinessCertificate.js
frontend/src/components/CreateSupport.js
frontend/src/components/DashboardRouter.js
frontend/src/components/dashboards/AdminDashboard.js
frontend/src/components/dashboards/StaffDashboard.js
frontend/src/components/dashboards/SupportDashboard.js
frontend/src/components/dashboards/UserDashboard.js
frontend/src/components/Login.js
frontend/src/components/ManageSupportUsers.js
frontend/src/components/Navigation.js
frontend/src/components/NotificationBell.js
frontend/src/components/payment/PaymentResult.js
frontend/src/components/PrivateRoute.js
frontend/src/components/Profile.js
frontend/src/components/PushNotificationToggle.js
frontend/src/components/Register.js
frontend/src/components/reports/CreateUserReport.js
frontend/src/components/reports/UserReportList.js
frontend/src/components/ResetPassword.js
frontend/src/components/RevenueDashboard.js
frontend/src/components/tickets/CreateTicket.js
frontend/src/components/tickets/TicketList.js
frontend/src/components/UnpaidBusinesses.js
frontend/src/context/AuthContext.js
frontend/src/context/NotificationContext.js
frontend/src/hooks/usePushNotifications.js
frontend/src/index.css
frontend/src/index.js
frontend/src/logo.svg
frontend/src/reportWebVitals.js
frontend/src/setupTests.js
frontend/src/utils/pushNotifications.js
frontend/tailwind.config.js
repopack-output copy.txt

================================================================
Repository Files
================================================================

================
File: backend/models/Business.js
================
const mongoose = require('mongoose');

const businessSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  location: {
    type: String,
    required: true
  },
  justificationLetter: {
    type: String,
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'more-info-requested'],
    default: 'pending'
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  adminFeedback: {
    type: String,
    default: ''
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  rentFee: {
    type: Number,
    required: true,
    default: 0 // Will be set by admin during approval
  },
  contractFee: {
    type: Number,
    required: true,
    default: 50 // Fixed contract fee
  }
});

const Business = mongoose.model('Business', businessSchema);
module.exports = Business;

================
File: backend/routes/business.js
================
const express = require('express');
const router = express.Router();
const Business = require('../models/Business');
const Contract = require('../models/Contract');
const { authMiddleware, roleCheck } = require('../middleware/auth');
const { createNotification } = require('../utils/notifications');

// Register a new business
router.post('/register', authMiddleware, async (req, res) => {
  try {
    const { name, location, justificationLetter } = req.body;
    
    // Check if user already has a business application
    const existingBusiness = await Business.findOne({ owner: req.user.id });
    if (existingBusiness) {
      return res.status(400).json({ 
        message: 'You already have a business application' 
      });
    }

    const business = await Business.create({
      name,
      location,
      justificationLetter,
      owner: req.user.id
    });

    res.status(201).json(business);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Get all business applications (admin only)
router.get(
  '/applications',
  authMiddleware,
  roleCheck(['admin']),
  async (req, res) => {
    try {
      const applications = await Business.find()
        .populate('owner', 'username email')
        .sort('-createdAt');
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }
);

// Get user's business application
router.get('/my-application', authMiddleware, async (req, res) => {
  try {
    const business = await Business.findOne({ owner: req.user.id });
    if (!business) {
      return res.status(404).json({ message: 'No business application found' });
    }
    res.json(business);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

router.put('/edit/:id', authMiddleware, async (req, res) => {
  try {
    const { name, location, justificationLetter } = req.body;
    const business = await Business.findOne({ 
      _id: req.params.id,
      owner: req.user.id 
    });

    if (!business) {
      return res.status(404).json({ message: 'Business application not found' });
    }

    // If the status was 'more-info-requested', reset it to 'pending'
    const newStatus = business.status === 'more-info-requested' || 'approved' ? 'pending' : business.status;
    
    // Reset admin feedback if status was 'more-info-requested'
    const newAdminFeedback = business.status === 'more-info-requested' || 'approved' ? '' : business.adminFeedback;

    const updatedBusiness = await Business.findByIdAndUpdate(
      req.params.id,
      {
        name,
        location,
        justificationLetter,
        status: newStatus,
        adminFeedback: newAdminFeedback,
        updatedAt: Date.now()
      },
      { new: true }
    );

    res.json(updatedBusiness);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Update business application status (admin only)
router.put('/applications/:id/status', authMiddleware, async (req, res) => {
  try {
    const { status, adminFeedback, rentFee } = req.body;
    
    // Validate rent fee when approving
    if (status === 'approved') {
      if (!rentFee || rentFee <= 0) {
        return res.status(400).json({ message: 'Valid rent fee is required for approval' });
      }
    }

    const business = await Business.findById(req.params.id);
    if (!business) {
      return res.status(404).json({ message: 'Business not found' });
    }

    business.status = status;
    business.adminFeedback = adminFeedback;
    if (status === 'approved') {
      business.rentFee = rentFee;
    }

    if (await business.save()){
      await createNotification({
        recipientId: application.userId,
        title: 'Application Approved',
        message: 'Your business application has been approved!',
        type: 'success',
        link: '/dashboard',
        metadata: { applicationId: application._id }
      });
    }
    res.json(business);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

router.get('/:businessId/contract', authMiddleware, async (req, res) => {
  try {
    const contract = await Contract.findOne({
      business: req.params.businessId,
      status: 'paid'
    }).sort({ createdAt: -1 });
    
    if (!contract) {
      return res.status(404).json({ message: 'No active contract found' });
    }
    
    res.json(contract);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;

================
File: frontend/src/components/DashboardRouter.js
================
import { useAuth } from '../context/AuthContext';
import UserDashboard from './dashboards/UserDashboard';
import AdminDashboard from './dashboards/AdminDashboard';
import SupportDashboard from './dashboards/SupportDashboard';
import StaffDashboard from './dashboards/StaffDashboard';

const DashboardRouter = () => {
  const { user } = useAuth();

  switch (user.role) {
    case 'admin':
      return <AdminDashboard />;
    case 'support':
      return <SupportDashboard />;
    case 'staff':
      return <StaffDashboard />;
    default:
      return <UserDashboard />;
  }
};

export default DashboardRouter;

================
File: frontend/src/components/dashboards/AdminDashboard.js
================
import React, { useState, useEffect } from 'react';
import { Link } from "react-router-dom";
import axios from 'axios';

const AdminDashboard = () => {
  const [businesses, setBusinesses] = useState([]);
  const [pendingCount, setPendingCount] = useState(0);
  const [ticketCount, setTicketCount] = useState(0);
  const [supportCount, setSupportCount] = useState(0);
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [unpaidCount, setUnpaidCount] = useState(0);
  const [loading, setLoading] = useState(true);
  const [sortBy, setSortBy] = useState('newest');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchDashboardData();
  }, [sortBy]);

  const fetchDashboardData = async () => {
    try {
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };

      // Fetch all required data in parallel
      const [businessesRes, ticketsRes, usersRes, revenueRes, unpaidRes] = await Promise.all([
        axios.get('http://localhost:5000/api/business/applications', { headers }),
        axios.get('http://localhost:5000/api/tickets/unanswered-count', { headers }),
        axios.get('http://localhost:5000/api/auth/support-users', { headers }),
        axios.get('http://localhost:5000/api/business/total-revenue', { headers }),
        axios.get('http://localhost:5000/api/business/unpaid-businesses', { headers })
      ]);

      // Set pending applications count
      const pendingBusinesses = businessesRes.data.filter(b => b.status === 'pending');
      setPendingCount(pendingBusinesses.length);

      // Set unanswered tickets count
      setTicketCount(ticketsRes.data.count);

      // Set support users count
      setSupportCount(usersRes.data.length);

      // Set total revenue
      setTotalRevenue(revenueRes.data.totalRevenue);

      // Set unpaid businesses count
      setUnpaidCount(unpaidRes.data.length);

      // Process approved businesses
      let filteredData = businessesRes.data.filter(business => business.status === 'approved');
      if (searchTerm) {
        filteredData = filteredData.filter(business => 
          business.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          business.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
          business.owner.username.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }

      filteredData.sort((a, b) => {
        switch (sortBy) {
          case 'newest':
            return new Date(b.createdAt) - new Date(a.createdAt);
          case 'oldest':
            return new Date(a.createdAt) - new Date(b.createdAt);
          case 'name':
            return a.name.localeCompare(b.name);
          case 'location':
            return a.location.localeCompare(b.location);
          case 'rentFee':
            return b.rentFee - a.rentFee;
          default:
            return 0;
        }
      });

      // Limit to 10 businesses
      setBusinesses(filteredData.slice(0, 10));
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 bg-gray-50">
      <h2 className="text-2xl font-bold mb-6">Admin Dashboard</h2>
      
      {/* Info Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {/* Pending Applications Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Pending Applications</h3>
              <div className="bg-yellow-100 text-yellow-800 py-1 px-3 rounded-full text-sm">
                {pendingCount} Pending
              </div>
            </div>
            <p className="text-gray-600 mb-4">Review and process new business applications</p>
            <Link 
              to="/business-applications" 
              className="mt-auto bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition text-center"
            >
              View Applications
            </Link>
          </div>
        </div>

        {/* Support Tickets Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Support Tickets</h3>
              <div className="bg-red-100 text-red-800 py-1 px-3 rounded-full text-sm">
                {ticketCount} Unanswered
              </div>
            </div>
            <p className="text-gray-600 mb-4">Create new support staff accounts to handle tickets</p>
            <Link 
              to="/create-support" 
              className="mt-auto bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition text-center"
            >
              Create Support Account
            </Link>
          </div>
        </div>

        {/* Support Users Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Support Staff</h3>
              <div className="bg-blue-100 text-blue-800 py-1 px-3 rounded-full text-sm">
                {supportCount} Active
              </div>
            </div>
            <p className="text-gray-600 mb-4">Manage support staff accounts and access</p>
            <Link 
              to="/manage-support" 
              className="mt-auto bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded transition text-center"
            >
              Manage Support Users
            </Link>
          </div>
        </div>

       {/* Revenue Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Revenue</h3>
              <div className="bg-green-100 text-green-800 py-1 px-3 rounded-full text-sm">
                MWK {totalRevenue.toLocaleString()}
              </div>
            </div>
            <p className="text-gray-600 mb-4">Track revenue from contracts and monthly rent</p>
            <Link 
              to="/revenue-dashboard" 
              className="mt-auto bg-emerald-500 hover:bg-emerald-600 text-white px-4 py-2 rounded transition text-center"
            >
              View Revenue Details
            </Link>
          </div>
        </div>

        {/* Unpaid Businesses Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Payment Status</h3>
              <div className="bg-orange-100 text-orange-800 py-1 px-3 rounded-full text-sm">
                {unpaidCount} Unpaid
              </div>
            </div>
            <p className="text-gray-600 mb-4">Monitor businesses with pending payments</p>
            <Link 
              to="/unpaid-businesses" 
              className="mt-auto bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded transition text-center"
            >
              View Unpaid Businesses
            </Link>
          </div>
        </div>

        {/* Location Management Card */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Location Management</h3>
              <div className="bg-indigo-100 text-indigo-800 py-1 px-3 rounded-full text-sm">
                Coming Soon
              </div>
            </div>
            <p className="text-gray-600 mb-4">Manage and track available business locations</p>
            <button 
              className="mt-auto bg-gray-500 text-white px-4 py-2 rounded transition text-center cursor-not-allowed opacity-75"
              disabled
            >
              Manage Locations
            </button>
          </div>
        </div>
      </div>

      {/* Approved Businesses Section */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-xl font-semibold mb-4">Recent Approved Businesses</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
            <select
              className="w-full p-2 border rounded-md bg-white"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="name">Business Name</option>
              <option value="location">Location</option>
              <option value="rentFee">Rent Fee (High to Low)</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <input
              type="text"
              placeholder="Search by name, location, or owner..."
              className="w-full p-2 border rounded-md"
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                fetchDashboardData();
              }}
            />
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          </div>
        ) : businesses.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500">No approved businesses found</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {businesses.map(business => (
              <div key={business._id} className="border rounded-lg p-4 hover:shadow-lg transition">
                <h4 className="font-semibold text-lg mb-2">{business.name}</h4>
                <p className="text-gray-600">Location: {business.location}</p>
                <p className="text-gray-600">Owner: {business.owner.username}</p>
                <p className="text-gray-600">Monthly Rent: MWK {business.rentFee.toLocaleString()}</p>
                <p className="text-sm text-gray-500 mt-2">
                  Approved on: {new Date(business.updatedAt).toLocaleDateString()}
                </p>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminDashboard;

================
frontend/src/components/business/BusinessApplications.js
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { ToastContainer, toast } from 'react-toastify';

const BusinessApplications = () => {
  const [applications, setApplications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [rentFees, setRentFees] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [adminFeedbacks, setAdminFeedbacks] = useState({});  // New state for feedback
  
  const handleError = (err) => toast.error(err, {position: "top-right"});
  const handleSuccess = (msg) => toast.success(msg, {position: "top-right"});

  useEffect(() => {
    fetchApplications();
  }, [filter, sortBy]);

  // Initialize admin feedbacks when applications are loaded
  useEffect(() => {
    const initialFeedbacks = {};
    applications.forEach(app => {
      initialFeedbacks[app._id] = app.adminFeedback || '';
    });
    setAdminFeedbacks(initialFeedbacks);
  }, [applications]);

  //init rent fees in the same manner
  useEffect(() => {
    const initialRentFees = {};
    applications.forEach(app => {
      initialRentFees[app._id] = app.rentFee || '';
    });
    setRentFees(initialRentFees);
  }, [applications]);

  const fetchApplications = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(
        'http://localhost:5000/api/business/applications',
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      // Filter out approved applications
      let filteredData = response.data.filter(app => app.status !== 'approved');
      
      if (filter !== 'all') {
        filteredData = filteredData.filter(app => app.status === filter);
      }

      if (searchTerm) {
        filteredData = filteredData.filter(app => 
          app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          app.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
          app.owner.username.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }

      filteredData.sort((a, b) => {
        switch (sortBy) {
          case 'newest':
            return new Date(b.createdAt) - new Date(a.createdAt);
          case 'oldest':
            return new Date(a.createdAt) - new Date(b.createdAt);
          case 'name':
            return a.name.localeCompare(b.name);
          case 'location':
            return a.location.localeCompare(b.location);
          default:
            return 0;
        }
      });

      setApplications(filteredData);
    } catch (error) {
      handleError(error.response?.data?.message || 'Failed to fetch applications');
    } finally {
      setLoading(false);
    }
  };

  const handleRentFeeChange = (applicationId, value) => {
    setRentFees({
      ...rentFees,
      [applicationId]: value
    });
  };

  // New function to handle feedback changes
  const handleFeedbackChange = (applicationId, value) => {
    setAdminFeedbacks({
      ...adminFeedbacks,
      [applicationId]: value
    });
  };

  // New function to save feedback
  const handleSaveFeedback = async (applicationId) => {
    try {
      const token = localStorage.getItem('token');
      await axios.put(
        `http://localhost:5000/api/business/applications/${applicationId}/status`,
        {
          status: applications.find(app => app._id === applicationId).status,
          adminFeedback: adminFeedbacks[applicationId]
        },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      handleSuccess('Feedback saved successfully');
      fetchApplications();
    } catch (error) {
      handleError(error.response?.data?.message || 'Failed to save feedback');
    }
  };

  const handleStatusUpdate = async (id, status) => {
    try {
      const token = localStorage.getItem('token');
      const payload = {
        status,
        adminFeedback: adminFeedbacks[id]
      };

      if (status === 'approved') {
        const rentFee = parseFloat(rentFees[id]);
        if (!rentFee || rentFee <= 0) {
          handleError('Please set a valid rent fee before approving');
          return;
        }
        payload.rentFee = rentFee;
      }

      await axios.put(
        `http://localhost:5000/api/business/applications/${id}/status`,
        payload,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      handleSuccess(`Application ${status} successfully`);
      fetchApplications();
    } catch (error) {
      handleError(error.response?.data?.message || 'Failed to update status');
    }
  };

  if (loading) return (
    <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
    </div>
  );

  return (
    <div className="p-6">
      <div className="mb-6 bg-white rounded-lg shadow p-4">
        <h2 className="text-2xl font-bold mb-4">Business Applications</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Status</label>
            <select
              className="w-full p-2 border rounded-md bg-white"
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
            >
              <option value="all">All Applications</option>
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="rejected">Rejected</option>
              <option value="more-info-requested">More Info Requested</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
            <select
              className="w-full p-2 border rounded-md bg-white"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="name">Business Name</option>
              <option value="location">Location</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <input
              type="text"
              placeholder="Search by name, location, or owner..."
              className="w-full p-2 border rounded-md"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>
      </div>

      <div className="space-y-4">
        {applications.length === 0 ? (
          <div className="text-center py-8 bg-white rounded-lg shadow">
            <p className="text-gray-500">No applications found matching your criteria</p>
          </div>
        ) : (
          applications.map((application) => (
            <div key={application._id} className="bg-white p-6 rounded-lg shadow">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <h3 className="text-xl font-semibold mb-2">{application.name}</h3>
                  <p className="text-gray-600">Location: {application.location}</p>
                  <p className="text-gray-600">
                    Applicant: {application.owner.username} ({application.owner.email})
                  </p>
                  <p className="text-gray-600">
                    Status: <span className={`font-semibold ${
                      application.status === 'approved' ? 'text-green-600' :
                      application.status === 'rejected' ? 'text-red-600' :
                      application.status === 'pending' ? 'text-yellow-600' :
                      'text-blue-600'
                    }`}>{application.status}</span>
                  </p>
                  <p className="text-gray-600">
                    Submitted: {new Date(application.createdAt).toLocaleDateString()}
                  </p>
                </div>
                
                <div className="space-y-2">
                  <h4 className="font-semibold">Justification Letter:</h4>
                  <p className="bg-gray-50 p-3 rounded text-sm">{application.justificationLetter}</p>
                </div>
              </div>

              <div className="mb-4">
                <h4 className="font-semibold mb-2">Monthly Rent Fee (MWK):</h4>
                <input
                  type="number"
                  className="w-full md:w-64 p-2 border rounded"
                  value={rentFees[application._id] || ''}
                  onChange={(e) => handleRentFeeChange(application._id, e.target.value)}
                  placeholder="Enter monthly rent fee..."
                  min="0"
                />
                <p className="text-sm text-gray-500 mt-1">
                  *Required for approval. Set based on location and business type.
                </p>
              </div>

              <div className="mb-4">
                <h4 className="font-semibold mb-2">Admin Feedback:</h4>
                <div className="flex gap-2">
                  <textarea
                    className="w-full p-2 border rounded"
                    value={adminFeedbacks[application._id] || ''}
                    onChange={(e) => handleFeedbackChange(application._id, e.target.value)}
                    placeholder="Enter feedback for the applicant..."
                    rows="3"
                  />
                  <button
                    onClick={() => handleSaveFeedback(application._id)}
                    className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition whitespace-nowrap h-fit"
                  >
                    Save Feedback
                  </button>
                </div>
              </div>

              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => handleStatusUpdate(application._id, 'approved')}
                  className={`bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition ${
                    !rentFees[application._id] ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                  disabled={!rentFees[application._id]}
                >
                  Approve
                </button>
                <button
                  onClick={() => handleStatusUpdate(application._id, 'rejected')}
                  className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded transition"
                >
                  Reject
                </button>
                <button
                  onClick={() => handleStatusUpdate(application._id, 'more-info-requested')}
                  className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded transition"
                >
                  Request More Info
                </button>
              </div>
            </div>
          ))
        )}
      </div>
      <ToastContainer />
    </div>
  );
};

export default BusinessApplications;

================
frontend/src/components/business/BusinessRegistration.js
================
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import {ToastContainer, toast} from 'react-toastify';


const BusinessRegistration = () => {
  const handleError = (err) => toast.error(err, {position: "top-right", });
  const handleSuccess = (msg) =>toast.success(msg, {position: "top-right",});
  const [formData, setFormData] = useState({
    name: '',
    location: '',
    justificationLetter: ''
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      await axios.post(
        'http://localhost:5000/api/business/register',
        formData,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      handleSuccess("Business registered successfully");
      setTimeout(() => {navigate('/dashboard');}, 1000);
    } catch (error) {
      handleError(error.response?.data?.message || 'Registration failed');
    }
  };

  return (
    <>
    <div className="max-w-2xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold mb-6">Register Business</h2>
      {error && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
          {error}
        </div>
      )}
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <label className="block mb-2">Business Name</label>
          <input
            type="text"
            className="w-full p-2 border rounded"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            required
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2">Business Location</label>
          <input
            type="text"
            className="w-full p-2 border rounded"
            value={formData.location}
            onChange={(e) => setFormData({...formData, location: e.target.value})}
            required
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2">Letter of Justification</label>
          <textarea
            className="w-full p-2 border rounded h-32"
            value={formData.justificationLetter}
            onChange={(e) => setFormData({...formData, justificationLetter: e.target.value})}
            required
            placeholder="Please explain why you want to register this business..."
          />
        </div>
        <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">
          Submit Application
        </button>
      </form>
    </div>
    <ToastContainer />
    </>
  );
};

export default BusinessRegistration;